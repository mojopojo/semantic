
# SPARQL 1.0 ---------------------------------------------

#1. Todos los triples en la base de datos de SPARQL.

SELECT *
WHERE { ?s ?r ?o }

#2. Todos los subjectos y nombres con la propiedad foaf:name.

#3. Todos los nombres sin entregar los subjectos.

#4. Tu propio nombre usando tu IRI (foaf:name)

#5. Todo los subjectos con el nombre “Jose” (firstName).

#6. Todos los nombres de las personas (type foaf:Person) ordenado (DESC) por edad (foaf:age).

#7. El nombre de la quinta persona (type foaf:Person) m´as vieja (cualquiera persona con esta edad).

#8. Todos los nombres de las personas que tienen la misma edad o menos que la tuya (puedes poner tu
# edad directamente o con un patron de consulta usando tu IRI).

#9. Todos los subjectos de tus amigos (foaf:knows) con tus nombres (foaf:name) si est´an disponibles
# (hay que usar OPTIONAL).

#10. Todos los pares con la tipa persona (foaf:Person) que compartan al menos un inter´es (foaf:interest)
# o una pel´ıcula favorita (ex:likesMovie) (hay que usar UNION; los nombres son opcionales: los IRIs bastan).


#11. Los nombres de los “Named Graphs” que describan al menos una persona que tenga treinta tantos anos (30 ≤ etad ≤ 39).


# 12. Un grafo de RDF con triples usando la propiedad ex:friendOfAFriend donde (x, ex:friendOfAFriend, z)
# si y solo si (x, foaf:knows, y), (y, foaf:knows, z) (hay que usar CONSTRUCT). Es decir, hay que consultar
# por todas las personas que est´an a una distancia de dos en el grafo de conexiones foaf:knows y crear un grafo conectando cada tal par con ex:friendOfAFriend.
 

# SPARQL 1.1 ---------------------------------------------
 
#13. El conteo de personas.

#14. El conteo de personas que son conocidas por alguien (es decir, las personas q donde exista un triple (p, foaf:knows, q).


#15. El conteo de personas que no son conocidas por nadie (usa NOT EXISTS)


#16. El promedio del numero de intereses que tiene cada persona.


#17. Las personas que conozcas recursivamente (es decir, hay que entregar las personas a quienes haya un
# camino de foaf:knows de largo arbitrario empezando contigo)


#18. Los intereses de esas personas (tus amigos recursivos)


#19. Las pares de personas a y b, donde hay una camino de largo par desde a hasta b. Es decir, encontrar
#las pares de personas con distancia par (foaf:knows) entre si.

# SPARQL 1.1 updates ---------------------------------------------

#20. Deberıas importar los grafos de tus intereses y pel´ıculas desde Wikidata

#21. Deber´ıas consultar ahora para el director mas comun en las pel´ıculas favoritas de todas las personas: es
# decir, en pesar de contar las pelıculas, hay que contar los directores


#22. Finalmente, deber´ıas agregar a tu grafo la gente que tenga un director de una pel´ıcula favorito en com´un
#contigo. Se puede utilizar una propiedad ex:sameMovieTaste para conectarte con cada persona ası.



